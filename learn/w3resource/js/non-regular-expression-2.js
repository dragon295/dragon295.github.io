// 1

const is_boolean = (val) => typeof val === "boolean" || toString.call(val) === '[object Boolean]';

////////////////////////////////////////////////////////////////////////////////////////////////
// 2

const is_Error = (val) => toString.call(val) === "[object Error]" || val instanceof Error;

////////////////////////////////////////////////////////////////////////////////////////////////
// 3

const is_NaN = (val) => isNaN(val) || val !== val;

////////////////////////////////////////////////////////////////////////////////////////////////
// 4

const is_null = (val) => val === null;

////////////////////////////////////////////////////////////////////////////////////////////////
// 5

const is_number = (val) => Number(val) || typeof val === "number" || !isNaN(val) &&  toString.call(val) === "[object Number]"


////////////////////////////////////////////////////////////////////////////////////////////////
// 6

const is_object = (val) => typeof val === "function" || typeof val === "object" && !!val

////////////////////////////////////////////////////////////////////////////////////////////////
// 7

const is_json = (val) => toString.call(val) === "[object Object]";

////////////////////////////////////////////////////////////////////////////////////////////////
// 8

const is_regexp = (val) => toString.call(val) === "[object Regexp]" || val instanceof RegExp;

////////////////////////////////////////////////////////////////////////////////////////////////
// 9

const is_char = (val) => typeof val === "string" || Object.prototype.toString.call(val) === '[object String]';


////////////////////////////////////////////////////////////////////////////////////////////////
// 10

const  is_sameType = (val1, val2) =>  {
	if(is_NaN(val1) || is_NaN(val2)) return is_NaN(val1) === is_NaN(val2);
	return typeof val1 === typeof val2 || toString.call(val1) === toString.call(val2)
}