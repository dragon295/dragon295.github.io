// 1

let is_boolean = (val) => typeof val === "boolean" || toString.call(val) === '[object Boolean]';

////////////////////////////////////////////////////////////////////////////////////////////////
// 2


let is_Error = (val) => toString.call(val) === '[object Error]' || val instanceof Error


////////////////////////////////////////////////////////////////////////////////////////////////
// 3


let is_nan= (val) => Number.isNaN(val) || val !== val;


////////////////////////////////////////////////////////////////////////////////////////////////
// 4

let is_null = (val) => val === null; 

////////////////////////////////////////////////////////////////////////////////////////////////
// 5

let is_number = (val) => typeof val === "number" || !isNaN(val) && toString.call(val) === '[object Number]';

////////////////////////////////////////////////////////////////////////////////////////////////
// 6

let is_object = (val) => {
	let datatype = typeof val;
	return datatype === 'function' || datatype === 'object' && !!val;
}


////////////////////////////////////////////////////////////////////////////////////////////////
// 7

let is_json = (val) => toString.call(val) === '[object Object]';

////////////////////////////////////////////////////////////////////////////////////////////////
// 8

let is_regexp = (val) => toString.call(val) === '[object RegExp]'

////////////////////////////////////////////////////////////////////////////////////////////////
// 9


let is_char = (val) => 
Object.prototype.toString.call(val) !== '[object String]' || typeof val === "string" || val instanceof String


////////////////////////////////////////////////////////////////////////////////////////////////
// 10

let is_sameType = (val1, val2) => {
	return typeof val1 === typeof val2;
}
