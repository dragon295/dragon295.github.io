// 1
let check_date = (val) => {
	if ( Object.prototype.toString.call(val) === "[object Date]" ) return true;
	return false;   
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 2

let addCharac = (val) => {
	let now = new Date("11, 13, 2014");
	console.log(`${now.getMonth() + 1}${val}${now.getDate()}${val}${now.getFullYear()}`)
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 3


let get_day = (month, year) => {
	let fake =  new Date(year, month, 0);
	console.log(fake.getDate())
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 4


let getMonth = (val) => {
	const mlist = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
	console.log(mlist[val.getMonth()])
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 5


let compare_date = (date1, date2) => {
	return date1 > date2 ?  "Date1 > Date2" : date1 < date2 ? "Date2 > Date1" : "Date1 = Date2"
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 6


let add_minutes = (dt, minutes) => {
	return new Date(dt.getTime() + minutes * (1000*60));
} 


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 7


let is_weekend = (val) => {
	return new Date(val).getDay() === 6 || new Date(val).getDay() === 0 ? "weekend" : "not weekend";
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 8

let date_diff_indays = (val1, val2) => {
	let dt1 = new Date(val1);
	let dt2 = new Date(val2);
	return Math.floor((Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) - Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate()) ) /(1000 * 60 * 60 * 24));
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 9


let lastday = (year, month) => {
	console.log(new Date(year, month + 1, 0).getDate())
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 10


let yesterday = (val) => {
	let dt = new Date(val);
	return new Date((dt.setDate(dt.getDate()-1))).toString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 11

let max_date = (all_dates) => {
	let max_dt = all_dates[0],
	max_dtObj = new Date(all_dates[0]);
	all_dates.forEach(function(dt, index) {
		if ( new Date( dt ) > max_dtObj) {
			max_dt = dt;
			max_dtObj = new Date(dt);
		}
	});
	return max_dt;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 12

let min_date = (all_dates) => {
	let min_dt = all_dates[0],
	min_dtObj = new Date(all_dates[0]);
	all_dates.forEach(function(dt, index) {
		if ( new Date( dt ) < min_dtObj) {
			min_dt = dt;
			min_dtObj = new Date(dt);
		}
	});
	return min_dt;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 13

let timeConvert = (minute) => {
	let count = 0, sec = 60;
	while (minute - sec > 0) {
		count++;
		sec+=60
	}
	console.log(`${count}hour(s) and ${minute - (count * 60)} minute(s)`)
} 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 14


let days_of_a_year = (year) => {
	return year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0) ? 366 : 365
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 15

let quarter_of_the_year = (val) => {
	let month = new Date(val).getMonth() + 1;
	return Math.ceil(month / 3)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 16

let days_passed = (val) => {
	let current = new Date(val.getTime());
	let previous = new Date(val.getFullYear(), 0, 1);
	return Math.ceil((current - previous + 1) / (1000*60*60*24));
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 17


let Unix_timestamp = (t) =>{
	let dt = new Date(t*1000);
	let hr = dt.getHours();
	let m = "0" + dt.getMinutes();
	let s = "0" + dt.getSeconds();
	return hr+ ':' + m.substr(-2) + ':' + s.substr(-2);  
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 18

let calculate_age = (dob) => {
	let diff_ms = Date.now() - dob.getTime();
	let age_dt = new Date(diff_ms);
	return Math.abs(age_dt.getUTCFullYear() - 1970);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 19

let day_of_the_month = (d) => {
	return (d.getDate() < 10 ? "0" : "") + d.getDate();
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 20

let short_Days = (dt) => {
	let date = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
	console.log(date[dt.getDay()])
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 21

let long_Days = (dt) => {
	let date = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
	console.log(date[dt.getDay()])
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 22

let  ISO_numeric_date = (dt) => {
	return (dt.getDay() === 0 ? 7 : dt.getDay()); 
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 23

let english_ordinal_suffix = (val) => {
	let date = val.getDate();
	return date === 1 ? date + "st" : date === 2 ? date + "nd" : date === 3 ? date + "rd" : date + "th"
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 24



let ISO8601_week_no = (val) => {
	let week = new Date(val.valueOf());
	let dayn = (val.getDay() + 6) % 7;
	week.setDate(week.getDate() - dayn + 3);
	let firstThursday = week.valueOf();
	week.setMonth(0, 1);
	if (week.getDay() !== 4) week.setMonth(0, 1 + ((4 - week.getDay()) + 7) % 7);
	return 1 + Math.ceil((firstThursday - week) / (1000*60*60*24*7));
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 25

let full_month = (dt) => {
	let month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	return month[dt.getMonth()];
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 26

let numeric_month = (dt) => {
	return (dt.getMonth() < 9 ? '0' : '') + (dt.getMonth() + 1)
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 27

let short_month = (dt) => {
	let month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	return month[dt.getMonth()]
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 28

let full_year = (dt) => { 
	return dt.getFullYear(); 
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 29


let sort_year = (dt) => {
	return ("" + dt.getFullYear()).slice(2)
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 30


let  lower_am_pm = (dt) => { 
	return dt.getHours() < 12 ? 'am' : 'pm';
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 31


let  upper_am_pm = (dt) => { 
	return dt.getHours() < 12 ? 'AM' : 'PM';
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 32


let internet_time = (dt) => {
	return Math.floor((((dt.getUTCHours() + 1) % 24) + dt.getUTCMinutes() / 60 + dt.getUTCSeconds() / 3600) * 1000 / 24);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 33

let hours_with_zeroes = (dt) => {
	return ((dt.getHours() % 12 || 12) < 10 ? '0' : '') + (dt.getHours() % 12 || 12);
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 34

let hours_without_zeroes = (dt) => {
	return dt.getHours()
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 35


let minutes_with_leading_zeros = (dt) => {
	return (dt.getMinutes() < 10 ? "0" : "")  + dt.getMinutes();
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 36

let seconds_with_leading_zeros = (dt) => {
	return (dt.getSeconds() < 10 ? "0" : "") + dt.getSeconds();
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 37

let timeZone = () => {
	return /\((.*)\)/.exec(new Date())[1];
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 38

let daylights_savings = (dt) => { 
	let dst = null;
	for (let i = 0; i < 12; ++i) {
		let d = new Date(dt.getFullYear(), i, 1);
		let offset = dt.getTimezoneOffset();

		if (dst === null) dst = offset;
		else if (offset < dst) {
			dst = offset; 
			break;
		} 
		else if (offset > dst) 
			break;
	}
	return (dt.getTimezoneOffset() == dst) | 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 39

let diff_to_GMT = (dt) => { 
	return (-dt.getTimezoneOffset() < 0 ? '-' : '+') + (Math.abs(dt.getTimezoneOffset() / 60) < 10 ? '0' : '') + (Math.abs(dt.getTimezoneOffset() / 60)) + '00';
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 40

let timezone_offset_in_seconds = (dt) => { 
	return -dt.getTimezoneOffset() * 60;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 41


let add_years = (dt, year) => {
	return year !== null ? new Date(dt.setFullYear(dt.getFullYear() + year)) : undefined
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 42

let add_weeks = (dt, week) => {
	return week !== null ? new Date(dt.setDate(dt.getDate() + (n * 7))) : undefined;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 43

let add_months = (dt, month) => {
	return month !== null ? new Date(dt.setMonth(dt.getMonth() + n)) : undefined;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 44

let diff_minutes = (dt1, dt2) => {
	let diff = (dt2.getTime() - dt1.getTime()) / 1000;
	console.log(diff / 60);

	// return dt1 !== null && dt2 !== null 
	// ? Math.max(dt1.getMinutes(), dt2.getMinutes()) - Math.min(dt1.getMinutes(), dt2.getMinutes())
	// : undefined
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 45


let diff_hours = (dt1, dt2) => {
	let diff = (dt2.getTime() - dt1.getTime()) / 1000 ;
	console.log(Math.abs(Math.floor(diff / (60 * 60))));
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 46


let diff_days = (dt1, dt2) => {
	let diff = (dt2.getTime() - dt1.getTime()) / 1000 ;
	console.log(Math.abs(Math.floor(diff / (60 * 60 * 24))));
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 47


let diff_weeks = (dt1, dt2) => {
	let diff = (dt2.getTime() - dt1.getTime()) / 1000 ;
	console.log(Math.abs(Math.floor(diff / (60 * 60 * 24 * 7))));
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 48


let diff_months = (dt1, dt2) => {
	let diff = ( dt2.getTime() - dt1.getTime() ) / 1000 ;
	console.log(Math.abs(Math.round(diff / (60 * 60 * 24 * 7 * 4))));
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 49


let diff_years = (dt1,dt2) => {
	let diff =  (dt2.getFullYear() - dt1.getFullYear() );
	console.log(Math.abs(Math.round(diff)))
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 50

let startOfWeek = (dt) => {
	let diff = dt.getDate() - dt.getDay() + (dt.getDay() === 0 ? -6 : 1)
	return new Date(dt.setDate(diff));
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 51

let endOfWeek = (dt) => {
	let lastday = dt.getDate() - (dt.getDay() - 1) + 6;
	return new Date(dt.setDate(lastday));
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 52

let startOfMonth = (dt) => {
	return new Date(dt.getFullYear(), dt.getMonth(), 1);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 53

let endOfMonth = (dt) => {
	return new Date(dt.getFullYear(), dt.getMonth() + 1, 0);
}



const newYear = "1 Jan 2022";

function checkC(val) {
	const now = new Date();
	const next = new Date(newYear);

	console.log(Math.floor((next - now) / 1000 / 60))
}


// setInterval(checkC, 1000)